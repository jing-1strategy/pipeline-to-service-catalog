---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create EC2 instance for Review Portal with CloudWatch agent installed."
Parameters:
  SSMKey:
    Description: Name of parameter store which contains the json configuration of CWAgent.
    Type: String
    Default: AmazonCloudWatch-Analysis-Server-CW-Config
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: JingNVKeyPair
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.small
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  AnalysisServerVolumeType:
    Description: The type of the volume.
    Type: String
    Default: gp2
    AllowedValues: [gp2, io1]
    ConstraintDescription: This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
  AnalysisServerVolumeSize:
    Description: The size of the volume, in GiBs.
    Type: String
    Default: 50
    ConstraintDescription: 1-16,384 for gp2, 4-16,384 for io1, 500-16,384 for st1, 500-16,384 for sc1, and 1-1,024 for standard.
  AnalysisServerRootVolumeSize:
    Description: The size of the root volume, in GiBs.
    Type: String
    Default: 100
    ConstraintDescription: 1-16,384 for gp2, 4-16,384 for io1, 500-16,384 for st1, 500-16,384 for sc1, and 1-1,024 for standard.
  VPCId:
    Description: The id of an existing VPC that the EC2 instances will be launched into.
    Type: String
    Default: vpc-05ad25cd042facb61
    ConstraintDescription: must be an existing VPC.
  PrivateSubnetId:
    Description: The id of an existing private subnet that the EC2 instances will be launched into.
    Type: String
    Default: subnet-0fba18d11f5066df4
    ConstraintDescription: must be an existing private subnet in the Virtual Private Cloud.
  EFSVolumeId:
    Description: The id of the EFS volume need to be attached
    Type: String
    Default: fs-dbd4bb38
  MountPoint:
    Description: The Linux mount point for the EFS volume
    Type: String
    Default: /mnt/efs

  EFSMountTargateSecurityGroupId:
    Description: The security group id of the ECS mount target
    Type: String
    Default: sg-0821ec8e0e7b423dc

  AnalysisServerCleanupSNSTopic:
    Description: The arn of the SNS topic to trigger the cleanup lambda function
    Type: String
    Default: arn:aws:sns:us-east-1:842337631775:trigger-cleanup-lambda

Resources:
  AnalysisServerEC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: "/"

  AllowPublishToSNS:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowPublishToSNS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref AnalysisServerCleanupSNSTopic
      Roles:
        - !Ref AnalysisServerEC2Role

  AnalysisServerEC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - Ref: "AnalysisServerEC2Role"

  AnalysisServerEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: AnalysisServerEC2InstanceProfile
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of a dummy file, that change the contents of the dummy file can trigger the agent to reload the configuration from SSM parameter store.
        02_config-amazon-cloudwatch-agent:
          files:
            "/opt/aws/amazon-cloudwatch-agent/etc/dummy.version":
              content: !Sub |
                "You can change the VERSION below to to simulate the update of metadata"
                "VERSION=1.0"
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command:
                Fn::Sub:
                  - |
                    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssmkey} -s
                  - { ssmkey: !Ref SSMKey }

        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            "/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.AnalysisServerEC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource AnalysisServerEC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: "000400"
              owner: root
              group: root
            "/lib/systemd/system/cfn-hup.service":
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service

    Properties:
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref AnalysisServerEC2InstanceProfile
      KeyName: !Ref KeyName
      ImageId: !Ref InstanceAMI
      SecurityGroupIds: [!Ref InstanceSecurityGroup]
      SubnetId: !Ref PrivateSubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref AnalysisServerRootVolumeSize
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          repo_update: true
          repo_upgrade: all

          packages:
          - amazon-efs-utils

          runcmd:
          - mkdir -p ${MountPoint}
          - echo "${EFSVolumeId}:/ ${MountPoint} efs tls,_netdev" >> /etc/fstab
          - mount -a -t efs defaults
          - rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${SSMKey} -s
          - /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource AnalysisServerEC2Instance --region ${AWS::Region} --configsets default
          - /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource AnalysisServerEC2Instance --region ${AWS::Region}

      Tags:
        - Key: Name
          Value: ID Analysis Server
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Analysis Server
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "2049"
          ToPort: "2049"
          SourceSecurityGroupId: !Ref EFSMountTargateSecurityGroupId

  AnalysisServerVolume:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref "AnalysisServerVolumeSize"
      VolumeType: !Ref "AnalysisServerVolumeType"
      AvailabilityZone: !GetAtt "AnalysisServerEC2Instance.AvailabilityZone"
      Encrypted: true

  AnalysisServerVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref "AnalysisServerEC2Instance"
      VolumeId: !Ref "AnalysisServerVolume"

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref "AnalysisServerEC2Instance"
